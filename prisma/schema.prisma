// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  guest
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(25)
  password  String
  role      Role     @default(guest)
  createdAt DateTime @default(now()) @map("created_at")
  token     String   @default("") @db.VarChar(200)

  @@map("users")
}

model Room {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  reference String    @db.VarChar(150)
  floor     Int
  tenant    Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId  Int?      @map("tenant_id")
  Payment   Payment[]

  @@map("rooms")
}

model Tenant {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(150)
  joinDate DateTime  @default(now()) @map("join_date")
  dayToPay Int       @map("day_to_pay")
  rooms    Room[]
  payments Payment[]
  debt     Decimal   @default(0) @db.Decimal(9, 2)

  @@map("tenants")
}

model Service {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  unit         String         @default("")
  payments     Payment[]
  TotalPayment TotalPayment[]

  @@map("services")
}

model Payment {
  id           Int       @id @default(autoincrement())
  amount       Decimal   @db.Decimal(9, 2)
  amountPaid   Decimal   @default(0) @db.Decimal(9, 2)
  consume      Int?
  isPaid       Boolean   @default(false)
  lastDatePaid DateTime? @map("last_date_paid")
  dateToPay    DateTime  @default(now()) @map("date_to_pay")
  service      Service   @relation(fields: [serviceId], references: [id])
  serviceId    Int       @map("service_id")
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  tenantId     Int       @map("tenant_id")
  room         Room      @relation(fields: [roomId], references: [id])
  roomId       Int       @map("room_id")

  @@map("payments")
}

model TotalPayment {
  id           Int       @id @default(autoincrement())
  registerDate DateTime
  amount       Decimal   @db.Decimal(9, 2)
  consume      Decimal?  @db.Decimal(9, 2)
  isPaid       Boolean   @default(false)
  outageDate   DateTime?
  service      Service   @relation(fields: [serviceId], references: [id])
  serviceId    Int

  @@map("total_payments")
}
